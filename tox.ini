# Tox (https://tox.wiki/) - run tests in isolation using virtualenv.

[tox]
envlist =
    ruff
    format
    py3{7,8,9,10,11,12}
    pypy3{8,9}
    example-{argparse,click,docopt}
    package
    docs
    clean

[testenv]
description = Unit tests
deps =
    py3{9,10,11,12}: setuptools>=50
    coverage[toml]
    pytest
commands =
    coverage run -m pytest {posargs:tests}
    coverage xml
    coverage report

[testenv:clean]
description = Remove bytecode and other debris
skip_install = true
deps = pyclean
commands = pyclean {posargs:. --debris --erase docs/_build/**/* docs/_build/ tests/junit-report.xml --yes --verbose}

[testenv:docs]
description = Build package documentation (HTML)
skip_install = true
deps = sphinx
changedir = docs
commands = make html
allowlist_externals = make

[testenv:example-argparse]
description = Run test suite of example project
skip_install = true
deps = copier
commands =
    copier copy {toxinidir} {toxworkdir}/examples/argparse -d engine='Argparse' -d package='foobar' -d module='foobar' --defaults --vcs-ref HEAD
    tox -c {toxworkdir}/examples/argparse/tox.ini -e ruff
    tox -c {toxworkdir}/examples/argparse/tox.ini -e py -- -vv
allowlist_externals =
    tox

[testenv:example-click]
description = Run test suite of example project
skip_install = true
deps = copier
commands =
    copier copy {toxinidir} {toxworkdir}/examples/click -d engine='Click' -d package='foobar' -d module='foobar' --defaults --vcs-ref HEAD
    tox -c {toxworkdir}/examples/click/tox.ini -e ruff
    tox -c {toxworkdir}/examples/click/tox.ini -e py -- -vv
allowlist_externals =
    tox

[testenv:example-docopt]
description = Run test suite of example project
skip_install = true
deps = copier
commands =
    copier copy {toxinidir} {toxworkdir}/examples/docopt -d engine='Docopt' -d package='foobar' -d module='foobar' --defaults --vcs-ref HEAD
    tox -c {toxworkdir}/examples/docopt/tox.ini -e ruff
    tox -c {toxworkdir}/examples/docopt/tox.ini -e py -- -vv
allowlist_externals =
    tox

[testenv:format]
description = Ensure consistent code style
skip_install = true
deps = ruff
commands = ruff format {posargs:--check --diff .}

[testenv:package]
description = Build package and check metadata (or upload package)
skip_install = true
deps =
    build
    twine
commands =
    python -m build
    twine {posargs:check --strict} dist/*
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY_URL

[testenv:ruff]
description = Lightening-fast linting for Python
skip_install = true
deps = ruff
commands = ruff {posargs:--show-source .}
